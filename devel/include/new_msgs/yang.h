// Generated by gencpp from file new_msgs/yang.msg
// DO NOT EDIT!


#ifndef NEW_MSGS_MESSAGE_YANG_H
#define NEW_MSGS_MESSAGE_YANG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace new_msgs
{
template <class ContainerAllocator>
struct yang_
{
  typedef yang_<ContainerAllocator> Type;

  yang_()
    : num(0)
    , id(0)
    , grade(0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  yang_(const ContainerAllocator& _alloc)
    : num(0)
    , id(0)
    , grade(0)
    , yaw(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _num_type;
  _num_type num;

   typedef int8_t _id_type;
  _id_type id;

   typedef int32_t _grade_type;
  _grade_type grade;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::new_msgs::yang_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::new_msgs::yang_<ContainerAllocator> const> ConstPtr;

}; // struct yang_

typedef ::new_msgs::yang_<std::allocator<void> > yang;

typedef boost::shared_ptr< ::new_msgs::yang > yangPtr;
typedef boost::shared_ptr< ::new_msgs::yang const> yangConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::new_msgs::yang_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::new_msgs::yang_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::new_msgs::yang_<ContainerAllocator1> & lhs, const ::new_msgs::yang_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.id == rhs.id &&
    lhs.grade == rhs.grade &&
    lhs.yaw == rhs.yaw &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::new_msgs::yang_<ContainerAllocator1> & lhs, const ::new_msgs::yang_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace new_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::new_msgs::yang_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::new_msgs::yang_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::yang_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::yang_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::yang_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::yang_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::new_msgs::yang_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8ce65f94947c6f6defe83fa1b7d18f5";
  }

  static const char* value(const ::new_msgs::yang_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8ce65f94947c6f6ULL;
  static const uint64_t static_value2 = 0xdefe83fa1b7d18f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::new_msgs::yang_<ContainerAllocator> >
{
  static const char* value()
  {
    return "new_msgs/yang";
  }

  static const char* value(const ::new_msgs::yang_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::new_msgs::yang_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 num\n"
"int8 id\n"
"int32 grade\n"
"float32 yaw\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::new_msgs::yang_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::new_msgs::yang_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.id);
      stream.next(m.grade);
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yang_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::new_msgs::yang_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::new_msgs::yang_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num);
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "grade: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grade);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEW_MSGS_MESSAGE_YANG_H
