// Generated by gencpp from file new_msgs/vector_Armor.msg
// DO NOT EDIT!


#ifndef NEW_MSGS_MESSAGE_VECTOR_ARMOR_H
#define NEW_MSGS_MESSAGE_VECTOR_ARMOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace new_msgs
{
template <class ContainerAllocator>
struct vector_Armor_
{
  typedef vector_Armor_<ContainerAllocator> Type;

  vector_Armor_()
    : grade()
    , id()
    , x()
    , y()
    , z()  {
    }
  vector_Armor_(const ContainerAllocator& _alloc)
    : grade(_alloc)
    , id(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _grade_type;
  _grade_type grade;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _id_type;
  _id_type id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::new_msgs::vector_Armor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::new_msgs::vector_Armor_<ContainerAllocator> const> ConstPtr;

}; // struct vector_Armor_

typedef ::new_msgs::vector_Armor_<std::allocator<void> > vector_Armor;

typedef boost::shared_ptr< ::new_msgs::vector_Armor > vector_ArmorPtr;
typedef boost::shared_ptr< ::new_msgs::vector_Armor const> vector_ArmorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::new_msgs::vector_Armor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::new_msgs::vector_Armor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::new_msgs::vector_Armor_<ContainerAllocator1> & lhs, const ::new_msgs::vector_Armor_<ContainerAllocator2> & rhs)
{
  return lhs.grade == rhs.grade &&
    lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::new_msgs::vector_Armor_<ContainerAllocator1> & lhs, const ::new_msgs::vector_Armor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace new_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::new_msgs::vector_Armor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::new_msgs::vector_Armor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::vector_Armor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::new_msgs::vector_Armor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::vector_Armor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::new_msgs::vector_Armor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::new_msgs::vector_Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf7c5ccb1a8c18d9d98118393187f319";
  }

  static const char* value(const ::new_msgs::vector_Armor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf7c5ccb1a8c18d9ULL;
  static const uint64_t static_value2 = 0xd98118393187f319ULL;
};

template<class ContainerAllocator>
struct DataType< ::new_msgs::vector_Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "new_msgs/vector_Armor";
  }

  static const char* value(const ::new_msgs::vector_Armor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::new_msgs::vector_Armor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] grade\n"
"int64[] id\n"
"float64[] x\n"
"float64[] y\n"
"float64[] z\n"
;
  }

  static const char* value(const ::new_msgs::vector_Armor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::new_msgs::vector_Armor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grade);
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vector_Armor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::new_msgs::vector_Armor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::new_msgs::vector_Armor_<ContainerAllocator>& v)
  {
    s << indent << "grade[]" << std::endl;
    for (size_t i = 0; i < v.grade.size(); ++i)
    {
      s << indent << "  grade[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.grade[i]);
    }
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEW_MSGS_MESSAGE_VECTOR_ARMOR_H
